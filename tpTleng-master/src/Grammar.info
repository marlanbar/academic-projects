-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.3 from Grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp   (1)
	Funcs -> Func                                      (2)
	Funcs -> Func Funcs                                (3)
	Func -> function var '(' Args ')' StatementsBlock   (4)
	StatementsBlock -> Statement                       (5)
	StatementsBlock -> '{' Statements '}'              (6)
	Statements -> Statement                            (7)
	Statements -> Statement Statements                 (8)
	Statement -> var '=' Exp                           (9)
	Statement -> if BoolExp then StatementsBlock else StatementsBlock   (10)
	Statement -> if BoolExp then StatementsBlock       (11)
	Statement -> while BoolExp StatementsBlock         (12)
	Statement -> return Exp                            (13)
	Args ->                                            (14)
	Args -> var                                        (15)
	Args -> var ',' Args                               (16)
	BoolExp -> BoolExp '&&' BoolExp                    (17)
	BoolExp -> BoolExp '||' BoolExp                    (18)
	BoolExp -> '!' BoolExp                             (19)
	BoolExp -> Exp '==' Exp                            (20)
	BoolExp -> Exp '>' Exp                             (21)
	BoolExp -> Exp '<' Exp                             (22)
	BoolExp -> Exp '>=' Exp                            (23)
	BoolExp -> Exp '<=' Exp                            (24)
	Exp -> Exp '+' Exp                                 (25)
	Exp -> Exp '-' Exp                                 (26)
	Exp -> Exp '*' Exp                                 (27)
	Exp -> Exp '/' Exp                                 (28)
	Exp -> Exp '^' Exp                                 (29)
	Exp -> '(' Exp ')'                                 (30)
	Exp -> '-' Exp                                     (31)
	Exp -> num                                         (32)
	Exp -> var                                         (33)
	Exp -> var '(' CallArgs ')'                        (34)
	Exp -> pi                                          (35)
	CallArgs ->                                        (36)
	CallArgs -> Exp                                    (37)
	CallArgs -> Exp ',' CallArgs                       (38)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { TokenNum $$ }
	var            { TokenSym $$ }
	'='            { TokenAssign }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenTimes }
	'/'            { TokenDiv }
	'^'            { TokenPow }
	'&&'           { TokenAnd }
	'||'           { TokenOr }
	'!'            { TokenNot }
	'=='           { TokenEq }
	'<'            { TokenLss }
	'>'            { TokenGtr }
	'<='           { TokenLeq }
	'>='           { TokenGeq }
	'('            { TokenLParen }
	')'            { TokenRParen }
	'{'            { TokenScopel }
	'}'            { TokenScoper }
	','            { TokenComma }
	'.'            { TokenDot }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	while          { TokenWhile }
	pi             { TokenPi }
	function       { TokenFunction }
	plot           { TokenPlot }
	for            { TokenRange }
	return         { TokenReturn }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rule  1
	Funcs           rules 2, 3
	Func            rule  4
	StatementsBlock rules 5, 6
	Statements      rules 7, 8
	Statement       rules 9, 10, 11, 12, 13
	Args            rules 14, 15, 16
	BoolExp         rules 17, 18, 19, 20, 21, 22, 23, 24
	Exp             rules 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
	CallArgs        rules 36, 37, 38

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	function       shift, and enter state 4

	Program        goto state 5
	Funcs          goto state 2
	Func           goto state 3

State 1


	function       shift, and enter state 4

	Funcs          goto state 2
	Func           goto state 3

State 2

	Program -> Funcs . plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	plot           shift, and enter state 8


State 3

	Funcs -> Func .                                     (rule 2)
	Funcs -> Func . Funcs                               (rule 3)

	function       shift, and enter state 4
	plot           reduce using rule 2

	Funcs          goto state 7
	Func           goto state 3

State 4

	Func -> function . var '(' Args ')' StatementsBlock    (rule 4)

	var            shift, and enter state 6


State 5

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 6

	Func -> function var . '(' Args ')' StatementsBlock    (rule 4)

	'('            shift, and enter state 10


State 7

	Funcs -> Func Funcs .                               (rule 3)

	plot           reduce using rule 3


State 8

	Program -> Funcs plot . '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	'('            shift, and enter state 9


State 9

	Program -> Funcs plot '(' . var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	var            shift, and enter state 13


State 10

	Func -> function var '(' . Args ')' StatementsBlock    (rule 4)

	var            shift, and enter state 12
	')'            reduce using rule 14

	Args           goto state 11

State 11

	Func -> function var '(' Args . ')' StatementsBlock    (rule 4)

	')'            shift, and enter state 16


State 12

	Args -> var .                                       (rule 15)
	Args -> var . ',' Args                              (rule 16)

	')'            reduce using rule 15
	','            shift, and enter state 15


State 13

	Program -> Funcs plot '(' var . '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	'('            shift, and enter state 14


State 14

	Program -> Funcs plot '(' var '(' . CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	')'            reduce using rule 36
	pi             shift, and enter state 31

	Exp            goto state 25
	CallArgs       goto state 26

State 15

	Args -> var ',' . Args                              (rule 16)

	var            shift, and enter state 12
	')'            reduce using rule 14

	Args           goto state 24

State 16

	Func -> function var '(' Args ')' . StatementsBlock    (rule 4)

	var            shift, and enter state 19
	'{'            shift, and enter state 20
	if             shift, and enter state 21
	while          shift, and enter state 22
	return         shift, and enter state 23

	StatementsBlockgoto state 17
	Statement      goto state 18

State 17

	Func -> function var '(' Args ')' StatementsBlock .    (rule 4)

	function       reduce using rule 4
	plot           reduce using rule 4


State 18

	StatementsBlock -> Statement .                      (rule 5)

	var            reduce using rule 5
	'}'            reduce using rule 5
	if             reduce using rule 5
	else           reduce using rule 5
	while          reduce using rule 5
	function       reduce using rule 5
	plot           reduce using rule 5
	return         reduce using rule 5


State 19

	Statement -> var . '=' Exp                          (rule 9)

	'='            shift, and enter state 49


State 20

	StatementsBlock -> '{' . Statements '}'             (rule 6)

	var            shift, and enter state 19
	if             shift, and enter state 21
	while          shift, and enter state 22
	return         shift, and enter state 23

	Statements     goto state 47
	Statement      goto state 48

State 21

	Statement -> if . BoolExp then StatementsBlock else StatementsBlock    (rule 10)
	Statement -> if . BoolExp then StatementsBlock      (rule 11)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'!'            shift, and enter state 45
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	BoolExp        goto state 46
	Exp            goto state 44

State 22

	Statement -> while . BoolExp StatementsBlock        (rule 12)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'!'            shift, and enter state 45
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	BoolExp        goto state 43
	Exp            goto state 44

State 23

	Statement -> return . Exp                           (rule 13)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 42

State 24

	Args -> var ',' Args .                              (rule 16)

	')'            reduce using rule 16


State 25

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)
	CallArgs -> Exp .                                   (rule 37)
	CallArgs -> Exp . ',' CallArgs                      (rule 38)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            reduce using rule 37
	','            shift, and enter state 41


State 26

	Program -> Funcs plot '(' var '(' CallArgs . ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	')'            shift, and enter state 35


State 27

	Exp -> num .                                        (rule 32)

	var            reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'^'            reduce using rule 32
	'&&'           reduce using rule 32
	'||'           reduce using rule 32
	'=='           reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32
	'<='           reduce using rule 32
	'>='           reduce using rule 32
	')'            reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	','            reduce using rule 32
	'.'            reduce using rule 32
	if             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	while          reduce using rule 32
	function       reduce using rule 32
	plot           reduce using rule 32
	return         reduce using rule 32
	%eof           reduce using rule 32


State 28

	Exp -> var .                                        (rule 33)
	Exp -> var . '(' CallArgs ')'                       (rule 34)

	var            reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'^'            reduce using rule 33
	'&&'           reduce using rule 33
	'||'           reduce using rule 33
	'=='           reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33
	'<='           reduce using rule 33
	'>='           reduce using rule 33
	'('            shift, and enter state 34
	')'            reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	','            reduce using rule 33
	'.'            reduce using rule 33
	if             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	while          reduce using rule 33
	function       reduce using rule 33
	plot           reduce using rule 33
	return         reduce using rule 33
	%eof           reduce using rule 33


State 29

	Exp -> '-' . Exp                                    (rule 31)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 33

State 30

	Exp -> '(' . Exp ')'                                (rule 30)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 32

State 31

	Exp -> pi .                                         (rule 35)

	var            reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'^'            reduce using rule 35
	'&&'           reduce using rule 35
	'||'           reduce using rule 35
	'=='           reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35
	'<='           reduce using rule 35
	'>='           reduce using rule 35
	')'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	','            reduce using rule 35
	'.'            reduce using rule 35
	if             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	while          reduce using rule 35
	function       reduce using rule 35
	plot           reduce using rule 35
	return         reduce using rule 35
	%eof           reduce using rule 35


State 32

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)
	Exp -> '(' Exp . ')'                                (rule 30)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	')'            shift, and enter state 71


State 33

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)
	Exp -> '-' Exp .                                    (rule 31)

	var            reduce using rule 31
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'&&'           reduce using rule 31
	'||'           reduce using rule 31
	'=='           reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	'<='           reduce using rule 31
	'>='           reduce using rule 31
	')'            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	','            reduce using rule 31
	'.'            reduce using rule 31
	if             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	while          reduce using rule 31
	function       reduce using rule 31
	plot           reduce using rule 31
	return         reduce using rule 31
	%eof           reduce using rule 31


State 34

	Exp -> var '(' . CallArgs ')'                       (rule 34)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	')'            reduce using rule 36
	pi             shift, and enter state 31

	Exp            goto state 25
	CallArgs       goto state 70

State 35

	Program -> Funcs plot '(' var '(' CallArgs ')' . ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	','            shift, and enter state 69


State 36

	Exp -> Exp '+' . Exp                                (rule 25)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 68

State 37

	Exp -> Exp '-' . Exp                                (rule 26)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 67

State 38

	Exp -> Exp '*' . Exp                                (rule 27)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 66

State 39

	Exp -> Exp '/' . Exp                                (rule 28)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 65

State 40

	Exp -> Exp '^' . Exp                                (rule 29)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 64

State 41

	CallArgs -> Exp ',' . CallArgs                      (rule 38)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	')'            reduce using rule 36
	pi             shift, and enter state 31

	Exp            goto state 25
	CallArgs       goto state 63

State 42

	Statement -> return Exp .                           (rule 13)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 13
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'}'            reduce using rule 13
	if             reduce using rule 13
	else           reduce using rule 13
	while          reduce using rule 13
	function       reduce using rule 13
	plot           reduce using rule 13
	return         reduce using rule 13


State 43

	Statement -> while BoolExp . StatementsBlock        (rule 12)
	BoolExp -> BoolExp . '&&' BoolExp                   (rule 17)
	BoolExp -> BoolExp . '||' BoolExp                   (rule 18)

	var            shift, and enter state 19
	'&&'           shift, and enter state 53
	'||'           shift, and enter state 54
	'{'            shift, and enter state 20
	if             shift, and enter state 21
	while          shift, and enter state 22
	return         shift, and enter state 23

	StatementsBlockgoto state 62
	Statement      goto state 18

State 44

	BoolExp -> Exp . '==' Exp                           (rule 20)
	BoolExp -> Exp . '>' Exp                            (rule 21)
	BoolExp -> Exp . '<' Exp                            (rule 22)
	BoolExp -> Exp . '>=' Exp                           (rule 23)
	BoolExp -> Exp . '<=' Exp                           (rule 24)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'=='           shift, and enter state 57
	'<'            shift, and enter state 58
	'>'            shift, and enter state 59
	'<='           shift, and enter state 60
	'>='           shift, and enter state 61


State 45

	BoolExp -> '!' . BoolExp                            (rule 19)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'!'            shift, and enter state 45
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	BoolExp        goto state 56
	Exp            goto state 44

State 46

	Statement -> if BoolExp . then StatementsBlock else StatementsBlock    (rule 10)
	Statement -> if BoolExp . then StatementsBlock      (rule 11)
	BoolExp -> BoolExp . '&&' BoolExp                   (rule 17)
	BoolExp -> BoolExp . '||' BoolExp                   (rule 18)

	'&&'           shift, and enter state 53
	'||'           shift, and enter state 54
	then           shift, and enter state 55


State 47

	StatementsBlock -> '{' Statements . '}'             (rule 6)

	'}'            shift, and enter state 52


State 48

	Statements -> Statement .                           (rule 7)
	Statements -> Statement . Statements                (rule 8)

	var            shift, and enter state 19
	'}'            reduce using rule 7
	if             shift, and enter state 21
	while          shift, and enter state 22
	return         shift, and enter state 23

	Statements     goto state 51
	Statement      goto state 48

State 49

	Statement -> var '=' . Exp                          (rule 9)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 50

State 50

	Statement -> var '=' Exp .                          (rule 9)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 9
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'}'            reduce using rule 9
	if             reduce using rule 9
	else           reduce using rule 9
	while          reduce using rule 9
	function       reduce using rule 9
	plot           reduce using rule 9
	return         reduce using rule 9


State 51

	Statements -> Statement Statements .                (rule 8)

	'}'            reduce using rule 8


State 52

	StatementsBlock -> '{' Statements '}' .             (rule 6)

	var            reduce using rule 6
	'}'            reduce using rule 6
	if             reduce using rule 6
	else           reduce using rule 6
	while          reduce using rule 6
	function       reduce using rule 6
	plot           reduce using rule 6
	return         reduce using rule 6


State 53

	BoolExp -> BoolExp '&&' . BoolExp                   (rule 17)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'!'            shift, and enter state 45
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	BoolExp        goto state 81
	Exp            goto state 44

State 54

	BoolExp -> BoolExp '||' . BoolExp                   (rule 18)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'!'            shift, and enter state 45
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	BoolExp        goto state 80
	Exp            goto state 44

State 55

	Statement -> if BoolExp then . StatementsBlock else StatementsBlock    (rule 10)
	Statement -> if BoolExp then . StatementsBlock      (rule 11)

	var            shift, and enter state 19
	'{'            shift, and enter state 20
	if             shift, and enter state 21
	while          shift, and enter state 22
	return         shift, and enter state 23

	StatementsBlockgoto state 79
	Statement      goto state 18

State 56

	BoolExp -> BoolExp . '&&' BoolExp                   (rule 17)
	BoolExp -> BoolExp . '||' BoolExp                   (rule 18)
	BoolExp -> '!' BoolExp .                            (rule 19)

	var            reduce using rule 19
	'&&'           reduce using rule 19
	'||'           reduce using rule 19
	'{'            reduce using rule 19
	if             reduce using rule 19
	then           reduce using rule 19
	while          reduce using rule 19
	return         reduce using rule 19


State 57

	BoolExp -> Exp '==' . Exp                           (rule 20)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 78

State 58

	BoolExp -> Exp '<' . Exp                            (rule 22)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 77

State 59

	BoolExp -> Exp '>' . Exp                            (rule 21)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 76

State 60

	BoolExp -> Exp '<=' . Exp                           (rule 24)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 75

State 61

	BoolExp -> Exp '>=' . Exp                           (rule 23)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 74

State 62

	Statement -> while BoolExp StatementsBlock .        (rule 12)

	var            reduce using rule 12
	'}'            reduce using rule 12
	if             reduce using rule 12
	else           reduce using rule 12
	while          reduce using rule 12
	function       reduce using rule 12
	plot           reduce using rule 12
	return         reduce using rule 12


State 63

	CallArgs -> Exp ',' CallArgs .                      (rule 38)

	')'            reduce using rule 38


State 64

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)
	Exp -> Exp '^' Exp .                                (rule 29)

	var            reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'^'            reduce using rule 29
	'&&'           reduce using rule 29
	'||'           reduce using rule 29
	'=='           reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29
	'<='           reduce using rule 29
	'>='           reduce using rule 29
	')'            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	','            reduce using rule 29
	'.'            reduce using rule 29
	if             reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	while          reduce using rule 29
	function       reduce using rule 29
	plot           reduce using rule 29
	return         reduce using rule 29
	%eof           reduce using rule 29


State 65

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp '/' Exp .                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'^'            reduce using rule 28
	'&&'           reduce using rule 28
	'||'           reduce using rule 28
	'=='           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	'<='           reduce using rule 28
	'>='           reduce using rule 28
	')'            reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	','            reduce using rule 28
	'.'            reduce using rule 28
	if             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	while          reduce using rule 28
	function       reduce using rule 28
	plot           reduce using rule 28
	return         reduce using rule 28
	%eof           reduce using rule 28


State 66

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp '*' Exp .                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'^'            reduce using rule 27
	'&&'           reduce using rule 27
	'||'           reduce using rule 27
	'=='           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	'<='           reduce using rule 27
	'>='           reduce using rule 27
	')'            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	','            reduce using rule 27
	'.'            reduce using rule 27
	if             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	while          reduce using rule 27
	function       reduce using rule 27
	plot           reduce using rule 27
	return         reduce using rule 27
	%eof           reduce using rule 27


State 67

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp '-' Exp .                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'^'            reduce using rule 26
	'&&'           reduce using rule 26
	'||'           reduce using rule 26
	'=='           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	'<='           reduce using rule 26
	'>='           reduce using rule 26
	')'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	','            reduce using rule 26
	'.'            reduce using rule 26
	if             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	while          reduce using rule 26
	function       reduce using rule 26
	plot           reduce using rule 26
	return         reduce using rule 26
	%eof           reduce using rule 26


State 68

	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp '+' Exp .                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	'^'            reduce using rule 25
	'&&'           reduce using rule 25
	'||'           reduce using rule 25
	'=='           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	'<='           reduce using rule 25
	'>='           reduce using rule 25
	')'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	','            reduce using rule 25
	'.'            reduce using rule 25
	if             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	while          reduce using rule 25
	function       reduce using rule 25
	plot           reduce using rule 25
	return         reduce using rule 25
	%eof           reduce using rule 25


State 69

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' . var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	var            shift, and enter state 73


State 70

	Exp -> var '(' CallArgs . ')'                       (rule 34)

	')'            shift, and enter state 72


State 71

	Exp -> '(' Exp ')' .                                (rule 30)

	var            reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'^'            reduce using rule 30
	'&&'           reduce using rule 30
	'||'           reduce using rule 30
	'=='           reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30
	'<='           reduce using rule 30
	'>='           reduce using rule 30
	')'            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	','            reduce using rule 30
	'.'            reduce using rule 30
	if             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	while          reduce using rule 30
	function       reduce using rule 30
	plot           reduce using rule 30
	return         reduce using rule 30
	%eof           reduce using rule 30


State 72

	Exp -> var '(' CallArgs ')' .                       (rule 34)

	var            reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'^'            reduce using rule 34
	'&&'           reduce using rule 34
	'||'           reduce using rule 34
	'=='           reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34
	'<='           reduce using rule 34
	'>='           reduce using rule 34
	')'            reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	','            reduce using rule 34
	'.'            reduce using rule 34
	if             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	while          reduce using rule 34
	function       reduce using rule 34
	plot           reduce using rule 34
	return         reduce using rule 34
	%eof           reduce using rule 34


State 73

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var . '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	'('            shift, and enter state 83


State 74

	BoolExp -> Exp '>=' Exp .                           (rule 23)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 23
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'&&'           reduce using rule 23
	'||'           reduce using rule 23
	'{'            reduce using rule 23
	if             reduce using rule 23
	then           reduce using rule 23
	while          reduce using rule 23
	return         reduce using rule 23


State 75

	BoolExp -> Exp '<=' Exp .                           (rule 24)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 24
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'&&'           reduce using rule 24
	'||'           reduce using rule 24
	'{'            reduce using rule 24
	if             reduce using rule 24
	then           reduce using rule 24
	while          reduce using rule 24
	return         reduce using rule 24


State 76

	BoolExp -> Exp '>' Exp .                            (rule 21)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 21
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'&&'           reduce using rule 21
	'||'           reduce using rule 21
	'{'            reduce using rule 21
	if             reduce using rule 21
	then           reduce using rule 21
	while          reduce using rule 21
	return         reduce using rule 21


State 77

	BoolExp -> Exp '<' Exp .                            (rule 22)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 22
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'&&'           reduce using rule 22
	'||'           reduce using rule 22
	'{'            reduce using rule 22
	if             reduce using rule 22
	then           reduce using rule 22
	while          reduce using rule 22
	return         reduce using rule 22


State 78

	BoolExp -> Exp '==' Exp .                           (rule 20)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	var            reduce using rule 20
	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'&&'           reduce using rule 20
	'||'           reduce using rule 20
	'{'            reduce using rule 20
	if             reduce using rule 20
	then           reduce using rule 20
	while          reduce using rule 20
	return         reduce using rule 20


State 79

	Statement -> if BoolExp then StatementsBlock . else StatementsBlock    (rule 10)
	Statement -> if BoolExp then StatementsBlock .      (rule 11)

	var            reduce using rule 11
	'}'            reduce using rule 11
	if             reduce using rule 11
	else           shift, and enter state 82
	while          reduce using rule 11
	function       reduce using rule 11
	plot           reduce using rule 11
	return         reduce using rule 11


State 80

	BoolExp -> BoolExp . '&&' BoolExp                   (rule 17)
	BoolExp -> BoolExp . '||' BoolExp                   (rule 18)
	BoolExp -> BoolExp '||' BoolExp .                   (rule 18)

	var            reduce using rule 18
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	'{'            reduce using rule 18
	if             reduce using rule 18
	then           reduce using rule 18
	while          reduce using rule 18
	return         reduce using rule 18


State 81

	BoolExp -> BoolExp . '&&' BoolExp                   (rule 17)
	BoolExp -> BoolExp '&&' BoolExp .                   (rule 17)
	BoolExp -> BoolExp . '||' BoolExp                   (rule 18)

	var            reduce using rule 17
	'&&'           reduce using rule 17
	'||'           reduce using rule 17
	'{'            reduce using rule 17
	if             reduce using rule 17
	then           reduce using rule 17
	while          reduce using rule 17
	return         reduce using rule 17


State 82

	Statement -> if BoolExp then StatementsBlock else . StatementsBlock    (rule 10)

	var            shift, and enter state 19
	'{'            shift, and enter state 20
	if             shift, and enter state 21
	while          shift, and enter state 22
	return         shift, and enter state 23

	StatementsBlockgoto state 85
	Statement      goto state 18

State 83

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' . CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	')'            reduce using rule 36
	pi             shift, and enter state 31

	Exp            goto state 25
	CallArgs       goto state 84

State 84

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs . ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	')'            shift, and enter state 86


State 85

	Statement -> if BoolExp then StatementsBlock else StatementsBlock .    (rule 10)

	var            reduce using rule 10
	'}'            reduce using rule 10
	if             reduce using rule 10
	else           reduce using rule 10
	while          reduce using rule 10
	function       reduce using rule 10
	plot           reduce using rule 10
	return         reduce using rule 10


State 86

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' . ')' for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	')'            shift, and enter state 87


State 87

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' . for var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	for            shift, and enter state 88


State 88

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for . var '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	var            shift, and enter state 89


State 89

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var . '=' Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	'='            shift, and enter state 90


State 90

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' . Exp '.' '.' Exp '.' '.' Exp    (rule 1)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 91

State 91

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp . '.' '.' Exp '.' '.' Exp    (rule 1)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'.'            shift, and enter state 92


State 92

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' . '.' Exp '.' '.' Exp    (rule 1)

	'.'            shift, and enter state 93


State 93

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' . Exp '.' '.' Exp    (rule 1)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 94

State 94

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp . '.' '.' Exp    (rule 1)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	'.'            shift, and enter state 95


State 95

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' . '.' Exp    (rule 1)

	'.'            shift, and enter state 96


State 96

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' . Exp    (rule 1)

	num            shift, and enter state 27
	var            shift, and enter state 28
	'-'            shift, and enter state 29
	'('            shift, and enter state 30
	pi             shift, and enter state 31

	Exp            goto state 97

State 97

	Program -> Funcs plot '(' var '(' CallArgs ')' ',' var '(' CallArgs ')' ')' for var '=' Exp '.' '.' Exp '.' '.' Exp .    (rule 1)
	Exp -> Exp . '+' Exp                                (rule 25)
	Exp -> Exp . '-' Exp                                (rule 26)
	Exp -> Exp . '*' Exp                                (rule 27)
	Exp -> Exp . '/' Exp                                (rule 28)
	Exp -> Exp . '^' Exp                                (rule 29)

	'+'            shift, and enter state 36
	'-'            shift, and enter state 37
	'*'            shift, and enter state 38
	'/'            shift, and enter state 39
	'^'            shift, and enter state 40
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 39
Number of terminals: 31
Number of non-terminals: 11
Number of states: 98
