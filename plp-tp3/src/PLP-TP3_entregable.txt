TestCase subclass: #TP3Tests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!	Eleccion todas allSatisfy: [ :eleccion |		eleccion eleccionSuperadora ganaContra: eleccion.	]! !	"Acá se construye el generador para poder testear. Por conveniencia sería recomendable que la forma por defecto de construir el jugador aleatorio utilice un generador real.	http://xkcd.com/221/"	| jugador generador |	generador := GeneradorRandomParaTest new.	jugador := Jugador aleatorioConGenerador: generador.		generador siguiente: (Eleccion todas indexOf: Eleccion piedra).	self assert: jugador eleccion = Eleccion piedra.		generador siguiente: (Eleccion todas indexOf: Eleccion spock).	self assert: jugador eleccion = Eleccion spock.! !test06UnJugadorAdaptativoCambiaSuEleccionCuandoEmpata	| jugador contrincante |		jugador := Jugador adaptativoIniciandoCon: Eleccion piedra.	contrincante := Jugador siempre: Eleccion piedra.	self assert: jugador eleccion = Eleccion piedra.	(Juego entre: jugador y: contrincante) iniciar.	self assert: (jugador eleccion ganaContra: contrincante eleccion).! !test09UnJugadorHumanoUtilizaLaInterfazGraficaParaJugar	| jugador contrincante |		jugador := Jugador humano .	contrincante := Jugador siempre: Eleccion piedra.	(Juego entre: jugador y: contrincante) iniciar.! !test11SePuedeJugarA3RondasHumanoContraOtro		|otroJugador|		otroJugador := Jugador adaptativoIniciandoCon: Eleccion tijera .		Juego mejorDe: 3 contra: otroJugador .! !test07ElJuegoSeAdaptaANuevasReglas	"https://www.youtube.com/watch?v=_PUEoDYpUyQ"	self assert: (Eleccion piedra pierdeContra: Eleccion spock).	self assert: (Eleccion papel ganaContra: Eleccion spock).	self assert: (Eleccion lagarto empataContra: Eleccion lagarto).	self assert: (Eleccion spock pierdeContra: Eleccion lagarto).! !test02SeCumplenLasReglasDelJuego"Implementar los distintos ganaContraX para lograr la funcionalidad pedida"	self assert: (Eleccion piedra ganaContra: Eleccion tijera).	self assert: (Eleccion piedra pierdeContra: Eleccion papel).	self assert: (Eleccion piedra empataContra: Eleccion piedra).	self assert: (Eleccion papel ganaContra: Eleccion piedra).	self assert: (Eleccion papel pierdeContra: Eleccion tijera).	self assert: (Eleccion papel empataContra: Eleccion papel).		self assert: (Eleccion tijera ganaContra: Eleccion papel).	self assert: (Eleccion tijera pierdeContra: Eleccion piedra).	self assert: (Eleccion tijera empataContra: Eleccion tijera).! !test04UnJuegoConsisteEnHacerCompetirLaEleccionDeDosJugadores	| jugadorPiedra jugadorPapel |		"https://www.youtube.com/watch?feature=player_detailpage&v=dwj254ofJbk#t=14"	jugadorPiedra := Jugador siempre: Eleccion piedra.	jugadorPapel := Jugador siempre: Eleccion papel.	self assert: (Juego entre: jugadorPiedra y: jugadorPapel) resultado ganador = jugadorPapel.	self assert: (Juego entre: jugadorPiedra y: jugadorPiedra) resultado esEmpate.! !test05UnJugadorAdaptativoCambiaSuEleccionCuandoPierde	| jugador contrincante |		jugador := Jugador adaptativoIniciandoCon: Eleccion piedra.	contrincante := Jugador siempre: Eleccion papel.	self assert: jugador eleccion = Eleccion piedra.	(Juego entre: jugador y: contrincante) iniciar.		self assert: (jugador eleccion ganaContra: contrincante eleccion).! !test01LaIgualdadYElHashDeEleccionNoDistingueInstanciasDelMismoTipo	self assert: Eleccion piedra = Eleccion piedra.	self assert: Eleccion papel = Eleccion papel.	self assert: Eleccion tijera = Eleccion tijera.		self assert: Eleccion piedra hash = Eleccion piedra hash.	self assert: Eleccion papel hash= Eleccion papel hash.	self assert: Eleccion tijera hash= Eleccion tijera hash.! !test10SePuedeJugarA3RondasEntreUnJugadoryOtro	| unJugador otroJugador |	unJugador := Jugador siempre: Eleccion piedra.	otroJugador := Jugador adaptativoIniciandoCon: Eleccion tijera .		Juego mejorDe: 3 entre: unJugador y: otroJugador .! !Object subclass: #Juego	instanceVariableNames: 'jugador1 jugador2 resultado eleccion1 eleccion2'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!iniciar		eleccion1 := jugador1 eleccion.	eleccion2 := jugador2 eleccion.		resultado := Resultado jugador1: jugador1 conEleccion: eleccion1				 			jugador2: jugador2 conEleccion: eleccion2.								resultado notificarAJugadores.! !jugador1: unJugador jugador2: otroJugador 		jugador1 := unJugador.	jugador2 := otroJugador.! !revancha	^ self iniciar.! !resultado		resultado isNil ifTrue: [ self iniciar ].		^ resultado.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Juego class	instanceVariableNames: ''!mejorDe: cantidadDeJuegos entre: unJugador y: otroJugador	| j |		j := Juego entre: unJugador y: otroJugador.	cantidadDeJuegos timesRepeat: [ j iniciar ].! !entre: unJugador y: otroJugador 		^ self new jugador1: unJugador jugador2: otroJugador;			yourself.! !mejorDe: cantidadDeJuegos contra: unJugador	Juego mejorDe: cantidadDeJuegos entre: Jugador humano y: unJugador.! !Object subclass: #Jugador	instanceVariableNames: 'eleccionEmpatadora otroEmpatador otraEleccionEmpatadora eleccionGanadora perdedor otraEleccionPerdedora eleccionPerdedora ganador jugo empatador'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!empatoEligiendo: miEleccion contra: otroJugador eligiendo: eleccionContraria 		eleccionGanadora := miEleccion .	empatador := self .	otroEmpatador := otroJugador .	otraEleccionEmpatadora := eleccionContraria .	jugo := true .! !ganoEligiendo: miEleccion contra: otroJugador eligiendo: eleccionContraria 		eleccionGanadora := miEleccion .	perdedor := otroJugador .	ganador := self .	eleccionPerdedora := eleccionContraria .	jugo := true .! !eleccion	self subclassResponsibility.! !perdioEligiendo: miEleccion contra: otroJugador eligiendo: eleccionContraria 		eleccionGanadora := eleccionContraria .	ganador := otroJugador .	perdedor := self .	eleccionPerdedora := miEleccion .	jugo := true .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Jugador class	instanceVariableNames: ''!aleatorio	^ self shouldBeImplemented.! !adaptativoIniciandoCon: unaEleccion	^ JugadorAdaptativo comenzandoCon: unaEleccion .! !humano	^ JugadorHumano new.! !aleatorioConGenerador: aGeneradorRandomParaTest 	^ JugadorAleatorio conGenerador:aGeneradorRandomParaTest .! !siempre: unaEleccion 	^ JugadorSiempre siempre: unaEleccion .	! !conHistoriaHasta: cantidadDeResultadosAGuardar	^ self shouldBeImplemented.! !Jugador subclass: #JugadorHumano	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!ganoEligiendo: miEleccion contra: otroJugador eligiendo: eleccionContraria 	^ UITheme current	messageIn: Morph new 	text: 'Le ganaste a', (eleccionContraria asString)	title: 'Resultado' . ! !eleccion	^ UITheme current			chooseDropListIn: Morph new		text: '¿Que jugamos?'		title: 'Nueva eleccion'		list: Eleccion todas! !empatoEligiendo: miEleccion contra: otroJugador eligiendo: eleccionContraria 	^UITheme current	messageIn: Morph new 	text: 'Empataste'  	title: 'Resultado' . ! !perdioEligiendo: miEleccion contra: otroJugador eligiendo: eleccionContraria 	^ UITheme current	messageIn: Morph new 	text: 'Perdiste contra' , (eleccionContraria  asString)	title: 'Resultado' . ! !Jugador subclass: #JugadorSiempre	instanceVariableNames: 'laEleccion'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!elegirSiempre: unaEleccion	laEleccion := unaEleccion ! !eleccion	 ^ laEleccion .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JugadorSiempre class	instanceVariableNames: ''!siempre: unaEleccion		^ self new		elegirSiempre: unaEleccion .		! !Object subclass: #GeneradorRandomParaTest	instanceVariableNames: 'siguiente'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!siguiente: unNumeroAleatorio		siguiente := unNumeroAleatorio.! !nextInt: anInteger 		^ siguiente.! !Jugador subclass: #JugadorAdaptativo	instanceVariableNames: 'primeraEleccion ultimaPartida ultimaEleccion'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!eleccion	"Elige opcion superadora si perdio la ultima vez, sino continua con opcion por defecto"		( jugo and: (perdedor == self or: empatador == self ) ) ifTrue: [ ultimaEleccion := (eleccionGanadora eleccionSuperadora) . ^ ultimaEleccion  ] .	^ ultimaEleccion			! !primeraEleccion: unaEleccion	ultimaEleccion := unaEleccion .	jugo := false .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JugadorAdaptativo class	instanceVariableNames: ''!comenzandoCon: unaEleccion	^ self new		primeraEleccion: unaEleccion ! !Object subclass: #Resultado	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!notificarAJugadores	^ self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Resultado class	instanceVariableNames: ''!jugador1: unJugador conEleccion: unaEleccion jugador2: otroJugador conEleccion: otraEleccion 		(unaEleccion empataContra: otraEleccion) ifTrue: [		^ Empate entre: unJugador eligiendo: unaEleccion y: otroJugador eligiendo: otraEleccion.	].		^ (unaEleccion ganaContra: otraEleccion)	ifTrue: [ Victoria de: unJugador eligiendo: unaEleccion contra: otroJugador eligiendo: otraEleccion ]	ifFalse: [ Victoria de: otroJugador eligiendo: otraEleccion contra: unJugador eligiendo: unaEleccion ].! !Resultado subclass: #Victoria	instanceVariableNames: 'ganador eleccionGanadora perdedor eleccionPerdedora'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!ganador	^ ganador! !ganador: unJugador eleccionGanadora: unaEleccion perdedor: otroJugador eligiendo: otraEleccion 		ganador := unJugador.	eleccionGanadora := unaEleccion.	perdedor := otroJugador.	eleccionPerdedora := otraEleccion.! !notificarAJugadores	ganador ganoEligiendo: eleccionGanadora  contra: perdedor  eligiendo: eleccionPerdedora  .	perdedor perdioEligiendo: eleccionPerdedora  contra: ganador eligiendo: eleccionGanadora . 	^ ganador .! !esEmpate		^ false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Victoria class	instanceVariableNames: ''!de: unJugador eligiendo: unaEleccion contra: otroJugador eligiendo: otraEleccion 		^ self new 		ganador: unJugador		eleccionGanadora: unaEleccion		perdedor: otroJugador		eligiendo: otraEleccion;		yourself.! !Resultado subclass: #Empate	instanceVariableNames: 'jugador1 eleccion1 jugador2 eleccion2'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!ganador	^ nil.! !esEmpate	^ true .! !notificarAJugadores	jugador1 empatoEligiendo: eleccion1 contra: jugador2  eligiendo: eleccion1 .	jugador2 empatoEligiendo: eleccion2 contra: jugador1 eligiendo: eleccion2 . 	^ self esEmpate.! !jugador1: unJugador eleccion1: unaEleccion jugador2: otroJugador eleccion2: otraEleccion 		jugador1 := unJugador.	eleccion1 := unaEleccion.	jugador2 := otroJugador.	eleccion2 := otraEleccion.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Empate class	instanceVariableNames: ''!entre: unJugador eligiendo: unaEleccion y: otroJugador eligiendo: otraEleccion 		^ self new		jugador1: unJugador		eleccion1: unaEleccion		jugador2: otroJugador		eleccion2: otraEleccion;		yourself.! !Object subclass: #Eleccion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!asString	^ self class name.! !hash	^ self asString .! !eleccionSuperadora	^  self subclassResponsibility .! !empataContra: otraEleccion	^ (self ganadorContra: otraEleccion) isNil.! !ganaContra: otraEleccion	^ (self noEmpataContra: otraEleccion)	 	and:		[ (self ganadorContra: otraEleccion) = self ]! !noEmpataContra: otraEleccion	^ (self empataContra: otraEleccion) not.! !pierdeContra: otraEleccion	^ (self noEmpataContra: otraEleccion)		and:		[ (self ganaContra: otraEleccion) not ]! !ganadorContraPiedra		^ self subclassResponsibility.! !ganadorContra: otraEleccion	^ self subclassResponsibility.! !ganadorContraTijera		^ self subclassResponsibility.! !ganadorContraPapel		^ self subclassResponsibility.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Eleccion class	instanceVariableNames: ''!todas	|aCollection|	aCollection := OrderedCollection new .	Eleccion  subclassesDo: [ :x | aCollection add: x new ] .	^ aCollection .	 ! !papel		^ Papel new.! !lagarto	^ Lagarto new .! !spock	^ Spock new.! !piedra		^ Piedra new.! !tijera		^ Tijera new.! !Eleccion subclass: #Piedra	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!= otraEleccion	^ self asString = otraEleccion asString.! !ganadorContraPapel		^ Papel new .! !ganadorContra: otraEleccion	^ otraEleccion ganadorContraPiedra .! !ganadorContraTijera		^ self .! !eleccionSuperadora	^ Papel new .! !ganadorContraPiedra		^ nil .! !Eleccion subclass: #Papel	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!= otraEleccion	^ self asString = otraEleccion asString.! !ganadorContraPapel		^ nil .! !ganadorContra: otraEleccion	^ otraEleccion ganadorContraPapel .! !ganadorContraTijera		^ Tijera new .! !eleccionSuperadora	^ Tijera new .! !ganadorContraPiedra		^ self .! !Eleccion subclass: #Tijera	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!= otraEleccion	^ self asString = otraEleccion asString.! !ganadorContraPapel		^ self .! !ganadorContra: otraEleccion	^ otraEleccion ganadorContraTijera .! !ganadorContraTijera		^ nil .! !eleccionSuperadora	^ Piedra new .! !ganadorContraPiedra		^ Piedra new .! !Eleccion subclass: #Lagarto	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!ganadorContraPiedra	^ self .! !eleccionSuperadora	^ Piedra new .! !ganadorContraLagarto	^ nil .! !ganadorContraSpock	^ self .! !ganadorContra: otraEleccion	^ otraEleccion ganadorContraLagarto .! != otraEleccion	^ self asString = otraEleccion asString.! !Eleccion subclass: #Spock	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!ganadorContraPiedra	^ self .! !ganadorContra: otraEleccion	^ otraEleccion ganadorContraSpock .! !ganadorContraPapel	^ Papel new .! != otraEleccion	^ self asString = otraEleccion asString.! !ganadorContraSpock	^ nil .! !eleccionSuperadora	^ Papel new .! !Jugador subclass: #JugadorAleatorio	instanceVariableNames: 'generador'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!eleccion	^ Eleccion todas at: (generador nextInt: 1) .! !generador: aGeneradorAleatorio	generador := aGeneradorAleatorio .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JugadorAleatorio class	instanceVariableNames: ''!conGenerador: aGeneradorRandomParaTest 	^ self new		generador: aGeneradorRandomParaTest .! !